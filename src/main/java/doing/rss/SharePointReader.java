//package doing.rss;
//
//import java.net.Authenticator;
//import java.net.PasswordAuthentication;
//import java.net.URI;
//import java.net.URL;
//import java.net.URLDecoder;
//import java.util.ArrayList;
//
//import javax.xml.parsers.DocumentBuilder;
//import javax.xml.parsers.DocumentBuilderFactory;
//import javax.xml.parsers.ParserConfigurationException;
//import javax.xml.ws.BindingProvider;
//
//import org.apache.xerces.dom.ElementNSImpl;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import org.w3c.dom.Document;
//import org.w3c.dom.Element;
//import org.w3c.dom.NamedNodeMap;
//import org.w3c.dom.NodeList;
//
//import com.google.common.collect.Lists;
//
///**
// * @author Shang Pu
// * @version Date: Oct 31, 2013 5:54:08 PM
// * @see http
// *      ://blog.ashwani.co.in/blog/2013-07-28/connect-and-access-sharepoint-webservice-from-java/
// */
//public class SharePointReader {
//	private static String username = "srvgbl-gdmsuser";
//	private static String password = "Pf85134699";
//	private static String BasesharepointUrl = "http://ecf.pfizer.com/sites/DocumentManagementBusinessSupport/BLSME";
//
//	private static ListsSoap listsoapstub;
//	private static final Logger log = LoggerFactory.getLogger(SharePointReader.class);
//
//	public static void main(String[] args) {
//		try {
//			NtlmAuthenticator authenticator = new NtlmAuthenticator("amer",username, password);
//			Authenticator.setDefault(authenticator);
//
//			// Authenticating and Opening the SOAP port of the Copy Web Service
//			listsoapstub = SharePointReader.getSPListSoapStub(username, password, BasesharepointUrl);
//
//			// Displays the lists items in the console
//			SharePointReader.displaySharePointList();
//		} catch (Exception e) {
//			log.error("Exception in SharePointReader.main()", e);
//		}
//	}
//
//	private static SharePointReader getInstance() {
//		return (new SharePointReader());
//	}
//
//	public static ListsSoap getSPListSoapStub(String username, String password, String url)
//			throws Exception {
//		ListsSoap port = null;
//		if (username != null && password != null) {
//			// This is to avoid the error where it tries to find wsdl file,
//			// due to hardcoded path of wsdl in your stub generated by wsimport.exe
//			URL wsdlURL = new URL(getInstance().getClass().getClassLoader()
//					.getResource("wsdl/lists.wsdl").toExternalForm());
//			Lists service = new Lists(wsdlURL);
//			port = service.getListsSoap();
//			((BindingProvider) port).getRequestContext().put(BindingProvider.USERNAME_PROPERTY, username);
//			((BindingProvider) port).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, password);
//
//			// To avoid, error with endpoint not supported, you need to give end point url here.
//			URL convertedurl = convertToURLEscapingIllegalCharacters(url + "/_vti_bin/Lists.asmx");
//			((BindingProvider) port).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
//					convertedurl.toString());
//		} else {
//			throw new Exception("Couldn't authenticate: Invalid connection details given.");
//		}
//		return port;
//	}
//
//	public static URL convertToURLEscapingIllegalCharacters(String string) {
//		try {
//			String decodedURL = URLDecoder.decode(string, "UTF-8");
//			URL url = new URL(decodedURL);
//			URI uri = new URI(url.getProtocol(), url.getUserInfo(), url.getHost(), url.getPort(),
//					url.getPath(), url.getQuery(), url.getRef());
//			return uri.toURL();
//		} catch (Exception e) {
//			log.error("Exception in SharePointReader.convertToURLEscapingIllegalCharacters()", e);
//		}
//		return null;
//	}
//
//	/**
//	 * Connects to a SharePoint Lists Web Service through the given open port, and reads all the
//	 * elements of the given list. Only the given column names are displayed.
//	 */
//	public static void displaySharePointList() throws Exception {
//		try {
//			String listName = "Announcements";
//			String rowLimit = "10";
//
//			// Here are additional parameters that may be set All Items
//			String viewName = "";
//			GetListItems.ViewFields viewFields = new GetListItems.ViewFields();
//			viewFields.getContent().add(getElementViewFields());
//			GetListItems.Query query = null;
//			GetListItems.QueryOptions queryOptions = null;
//			String webID = "";
//
//			GetListItemsResponse.GetListItemsResult result = listsoapstub.getListItems(listName,
//					viewName, query, viewFields, rowLimit, queryOptions, webID);
//			Object listResult = result.getContent().get(0);
//			if ((listResult != null) && (listResult instanceof Element)) {
//				ElementNSImpl node = (ElementNSImpl) listResult;
//
//				// selects a list of nodes which have z:row elements
//				NodeList list = node.getElementsByTagName("z:row");
//				log.info("=> " + list.getLength() + " results from SharePoint Online");
//
//				// Columns names to extract
//				ArrayList<String> listColumnNames = new ArrayList<String>();
//				listColumnNames.add("LinkTitle");
//				listColumnNames.add("Modified");
//				// listColumnNames.add("Expires");
//
//				// Displaying every result received from SharePoint, with its ID
//				for (int i = 0; i < list.getLength(); i++) {
//					// Gets the attributes of the current row/element
//					NamedNodeMap attributes = list.item(i).getAttributes();
//					log.info("******** Item ID: " + attributes.getNamedItem("ows_ID").getNodeValue()
//							+ " ********");
//
//					// Displays all the attributes of the list item that correspond to the column names given
//					// Note the column names prepended with "ows_" coz internal name format is that.
//					//
//					for (String columnName : listColumnNames) {
//						String internalColumnName = "ows_" + columnName;
//						if (attributes.getNamedItem(internalColumnName) != null) {
//							log.info(columnName + ": "
//									+ attributes.getNamedItem(internalColumnName).getNodeValue());
//						} else {
//							throw new Exception("Couldn't find the '" + columnName + "' column in the '"
//									+ listName + "' list in SharePoint.\n");
//						}
//					}
//				}
//			} else {
//				log.warn("listName = {}, list response from SharePoint is either null or corrupt\n",
//						listName);
//			}
//		} catch (Exception e) {
//			log.error("Exception in SharePointReader.displaySharePointList()", e);
//		}
//	}
//
//	private static Object getElementViewFields() {
//		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
//		factory.setValidating(false);
//		try {
//			DocumentBuilder builder = factory.newDocumentBuilder();
//			Document document = builder.newDocument();
//
//			Element elementViewFields = document.createElement("ViewFields");
//			Element elementFieldRef = document.createElement("FieldRef");
//			elementFieldRef.setAttribute("Name", "LinkTitle");
//			elementViewFields.appendChild(elementFieldRef);
//			return elementViewFields;
//		} catch (ParserConfigurationException e) {
//			log.error("ParserConfigurationException in SharePointReader.getElementViewFields()", e);
//		}
//		return null;
//	}
//
//	class SimpleAuthenticator extends Authenticator {
//		private final String username;
//		private final char[] password;
//
//		public SimpleAuthenticator(final String username, final String password) {
//			super();
//			this.username = new String(username);
//			this.password = password.toCharArray();
//		}
//
//		@Override
//		public PasswordAuthentication getPasswordAuthentication() {
//			return (new PasswordAuthentication(username, password));
//		}
//	}
//}
