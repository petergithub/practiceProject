log.dir=/var/log/foo
rrd.dir=${log.dir}/rrd
datestamp=yyyy-MM-dd/HH:mm:ss.SSS/zzz
roll.pattern.hourly=.yyyy-MM-dd.HH
roll.pattern.daily=.yyyy-MM-dd

# catchAll.log -- Default catch-all.
log4j.rootLogger=DEBUG, defaultLog
log4j.appender.defaultLog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.defaultLog.DatePattern=${roll.pattern.daily}
log4j.appender.defaultLog.File=${log.dir}/catchAll.log
log4j.appender.defaultLog.layout=org.apache.log4j.PatternLayout
log4j.appender.defaultLog.layout.ConversionPattern=%d{${datestamp}} [%t] %-5p %m%n

# foo.log
log4j.logger.com.foo.shared=INFO,fooLog
log4j.logger.com.foo.abc=INFO,fooLog
log4j.additivity.com.foo.shared=false
log4j.additivity.com.foo.abc=false
log4j.appender.fooLog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.fooLog.File=${log.dir}/foo.log
log4j.appender.fooLog.DatePattern=${roll.pattern.hourly}
log4j.appender.fooLog.layout=org.apache.log4j.PatternLayout
log4j.appender.fooLog.layout.ConversionPattern=%d{${datestamp}}%p%m%n

# fooConnections.log
log4j.logger.connections.com.foo=INFO,fooConnections
log4j.additivity.connections=false
log4j.appender.fooConnections=org.apache.log4j.DailyRollingFileAppender
log4j.appender.fooConnections.File=${log.dir}/fooConnections.log
log4j.appender.fooConnections.DatePattern=${roll.pattern.daily}
log4j.appender.fooConnections.layout=org.apache.log4j.PatternLayout
log4j.appender.fooConnections.layout.ConversionPattern=%d{${datestamp}}%p%m%n

# fooStacktraces.log
log4j.logger.stacktraces.com.foo=INFO,stacktraces
log4j.additivity.stacktraces=false
log4j.appender.stacktraces=org.apache.log4j.DailyRollingFileAppender
log4j.appender.stacktraces.File=${log.dir}/fooStacktraces.log
log4j.appender.stacktraces.DatePattern=${roll.pattern.daily}
log4j.appender.stacktraces.layout=org.apache.log4j.PatternLayout
log4j.appender.stacktraces.layout.ConversionPattern=%d{${datestamp}}%p%m%n

#Notice the use of property substitution! Very handy! Also, since I use single-character level strings (* instead of ERROR), I don't have to put spaces before and after %p.

#Level 	Use
#Fatal 	Only used when your subsystem has failed beyond recovery and the subsystem must halt. E.g. Failing to connect to a critical external database.
#Error 	An error has occurred in your subsystem that means it cannot fulfill its contract with the rest of the system. Errors must be actionable, and whatever that action is must be taken soon. Specifically, if "it would be nice to fix, but isn't critical", it should probably be a warning. E.g. Failing to read time sensitive data from an external database.
#Warn 	A notable, uncommon, and unexpected event that may impact some services of the subsystem. Also this can be used to denote that we're approaching an Error or Fatal state. E.g. Receiving an unexpected message from a database. Approaching an IO timeout.
#Info 	A summary of some a successful operation, the configuration of a subsystem, or the change of subsystem state (e.g. Search Server Starting, Search Server Shutting Down). This the meat of monitoring during normal operation, and should never be filtered as useful diagnostics are reported. There should never be a throwable associated with an Info; consider instead Debug or Warn. E.g. Duration of a timed operation. The starting or shutting down of a service. Initial configuration of a a data provider.
#Debug 	Details useful for debugging. E.g. The messages coming from an external database. Configuration read from a *.properties file.
#Trace 	Details that describe which code paths a thread follows. E.g. At the beginning and end of sections of code, entering if statements, repeating loops. 